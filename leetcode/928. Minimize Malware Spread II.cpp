class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        vector<int> clean(n, 1);
        for(auto x: initial) clean[x] = 0;
        
        vector<vector<int>> infectedBy(n, vector<int>());
        for(auto x: initial){
            set<int> seen = set<int>();
            dfs(graph, clean, x, seen);
            for(auto v: seen) infectedBy[v].push_back(x);
        }
        
        vector<int> contrib(n, 0);
        for(int v = 0; v < n; v++){
            if(infectedBy[v].size() == 1)
                contrib[infectedBy[v][0]]++;
        }
        
        sort(initial.begin(), initial.end());
        int ans = initial[0], ansSize = -1;
        for(auto u: initial){
            int score = contrib[u];
            if(score > ansSize || score == ansSize && u < ans){
                ans = u;
                ansSize = score;
            }
        }
        return ans;
    }
    
private:
    void dfs(vector<vector<int>>& graph, vector<int> &clean, int u, set<int> &seen){
        for(int v = 0; v < graph.size(); v++){
            if(graph[u][v] == 1 && clean[v] == 1 && seen.find(v) == seen.end()){
                seen.insert(v);
                dfs(graph, clean, v, seen);
            }
        }
    }
};