class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        vector<int> colors(n, -1);
        int c = 0;
        for(int i = 0; i < n; i++){
            if(colors[i] == -1) dfs(graph, colors, i, c++);
        }
        
        vector<int> size(c, 0);
        for(auto color: colors) size[color]++;
        
        vector<int> colorCount(c, 0);
        for(auto node: initial) colorCount[colors[node]]++;
        
        int ans = INT_MAX;
        for(auto node: initial){
            int col = colors[node];
            if(colorCount[col] == 1){
                if(ans == INT_MAX) ans = node;
                else if(size[col] > size[colors[ans]]) ans = node;
                else if(size[col] == size[colors[ans]] && node < ans) ans = node;
            }
        }
        if(ans == INT_MAX) return *min_element(initial.begin(), initial.end());
        return ans;
    }
    
private:
    void dfs(vector<vector<int>>& graph, vector<int> &colors, int node, int color){
        colors[node] = color;
        for(int i = 0; i < graph.size(); i++){
            if(graph[node][i] == 1 && colors[i] == -1){
                dfs(graph, colors, i, color);
            }
        }
    }
};